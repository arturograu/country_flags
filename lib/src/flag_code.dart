import 'package:collection/collection.dart';

/// {@template flag_code}
/// A class that provides a mapping between flag codes, country codes and
/// language codes.
/// {@endtemplate}
class FlagCode {
  static const Map<String, String> _flagCodesCountries = {
    'AD': 'ad',
    'AE': 'ae',
    'AF': 'af',
    'AG': 'ag',
    'AI': 'ai',
    'AL': 'al',
    'AM': 'am',
    'AO': 'ao',
    'AQ': 'aq',
    'AR': 'ar',
    'AS': 'as',
    'AT': 'at',
    'AU': 'au',
    'AW': 'aw',
    'AX': 'ax',
    'AZ': 'az',
    'BA': 'ba',
    'BB': 'bb',
    'BD': 'bd',
    'BE': 'be',
    'BF': 'bf',
    'BG': 'bg',
    'BH': 'bh',
    'BI': 'bi',
    'BJ': 'bj',
    'BL': 'bl',
    'BM': 'bm',
    'BN': 'bn',
    'BO': 'bo',
    'BQ': 'bq',
    'BR': 'br',
    'BS': 'bs',
    'BT': 'bt',
    'BV': 'bv',
    'BW': 'bw',
    'BY': 'by',
    'BZ': 'bz',
    'CA': 'ca',
    'CC': 'cc',
    'CD': 'cd',
    'CF': 'cf',
    'CG': 'cg',
    'CH': 'ch',
    'CI': 'ci',
    'CK': 'ck',
    'CL': 'cl',
    'CM': 'cm',
    'CN': 'cn',
    'CO': 'co',
    'CR': 'cr',
    'CU': 'cu',
    'CV': 'cv',
    'CW': 'cw',
    'CX': 'cx',
    'CY': 'cy',
    'CZ': 'cz',
    'DE': 'de',
    'DJ': 'dj',
    'DK': 'dk',
    'DM': 'dm',
    'DO': 'do',
    'DZ': 'dz',
    'EC': 'ec',
    'EE': 'ee',
    'EG': 'eg',
    'EH': 'eh',
    'ER': 'er',
    'ES': 'es',
    'ET': 'et',
    'FI': 'fi',
    'FJ': 'fj',
    'FK': 'fk',
    'FM': 'fm',
    'FO': 'fo',
    'FR': 'fr',
    'GA': 'ga',
    'GB': 'gb',
    'GB-SCT': 'gb-sct',
    'GB-WLS': 'gb-wls',
    'GB-ENG': 'gb-eng',
    'GB-NIR': 'gb-nir',
    'GD': 'gd',
    'GE': 'ge',
    'GF': 'gf',
    'GG': 'gg',
    'GH': 'gh',
    'GI': 'gi',
    'GL': 'gl',
    'GM': 'gm',
    'GN': 'gn',
    'GP': 'gp',
    'GQ': 'gq',
    'GR': 'gr',
    'GS': 'gs',
    'GT': 'gt',
    'GU': 'gu',
    'GW': 'gw',
    'GY': 'gy',
    'HK': 'hk',
    'HM': 'hm',
    'HN': 'hn',
    'HR': 'hr',
    'HT': 'ht',
    'HU': 'hu',
    'ID': 'id',
    'IE': 'ie',
    'IL': 'il',
    'IM': 'im',
    'IN': 'in',
    'IO': 'io',
    'IQ': 'iq',
    'IR': 'ir',
    'IS': 'is',
    'IT': 'it',
    'JE': 'je',
    'JM': 'jm',
    'JO': 'jo',
    'JP': 'jp',
    'KE': 'ke',
    'KG': 'kg',
    'KH': 'kh',
    'KI': 'ki',
    'KM': 'km',
    'KN': 'kn',
    'KP': 'kp',
    'KR': 'kr',
    'KW': 'kw',
    'KY': 'ky',
    'KZ': 'kz',
    'LA': 'la',
    'LB': 'lb',
    'LC': 'lc',
    'LI': 'li',
    'LK': 'lk',
    'LR': 'lr',
    'LS': 'ls',
    'LT': 'lt',
    'LU': 'lu',
    'LV': 'lv',
    'LY': 'ly',
    'MA': 'ma',
    'MC': 'mc',
    'MD': 'md',
    'ME': 'me',
    'MF': 'mf',
    'MG': 'mg',
    'MH': 'mh',
    'MK': 'mk',
    'ML': 'ml',
    'MM': 'mm',
    'MN': 'mn',
    'MO': 'mo',
    'MP': 'mp',
    'MQ': 'mq',
    'MR': 'mr',
    'MS': 'ms',
    'MT': 'mt',
    'MU': 'mu',
    'MV': 'mv',
    'MW': 'mw',
    'MX': 'mx',
    'MY': 'my',
    'MZ': 'mz',
    'NA': 'na',
    'NC': 'nc',
    'NE': 'ne',
    'NF': 'nf',
    'NG': 'ng',
    'NI': 'ni',
    'NL': 'nl',
    'NO': 'no',
    'NP': 'np',
    'NR': 'nr',
    'NU': 'nu',
    'NZ': 'nz',
    'OM': 'om',
    'PA': 'pa',
    'PE': 'pe',
    'PF': 'pf',
    'PG': 'pg',
    'PH': 'ph',
    'PK': 'pk',
    'PL': 'pl',
    'PM': 'pm',
    'PN': 'pn',
    'PR': 'pr',
    'PS': 'ps',
    'PT': 'pt',
    'PW': 'pw',
    'PY': 'py',
    'QA': 'qa',
    'RE': 're',
    'RO': 'ro',
    'RS': 'rs',
    'RU': 'ru',
    'RW': 'rw',
    'SA': 'sa',
    'SB': 'sb',
    'SC': 'sc',
    'SD': 'sd',
    'SE': 'se',
    'SG': 'sg',
    'SH': 'sh',
    'SI': 'si',
    'SJ': 'sj',
    'SK': 'sk',
    'SL': 'sl',
    'SM': 'sm',
    'SN': 'sn',
    'SO': 'so',
    'SR': 'sr',
    'SS': 'ss',
    'ST': 'st',
    'SV': 'sv',
    'SX': 'sx',
    'SY': 'sy',
    'SZ': 'sz',
    'TC': 'tc',
    'TD': 'td',
    'TF': 'tf',
    'TG': 'tg',
    'TH': 'th',
    'TJ': 'tj',
    'TK': 'tk',
    'TL': 'tl',
    'TM': 'tm',
    'TN': 'tn',
    'TO': 'to',
    'TR': 'tr',
    'TT': 'tt',
    'TV': 'tv',
    'TW': 'tw',
    'TZ': 'tz',
    'UA': 'ua',
    'UG': 'ug',
    'UM': 'um',
    'US': 'us',
    'UY': 'uy',
    'UZ': 'uz',
    'VA': 'va',
    'VC': 'vc',
    'VE': 've',
    'VG': 'vg',
    'VI': 'vi',
    'VN': 'vn',
    'VU': 'vu',
    'WF': 'wf',
    'WS': 'ws',
    'XK': 'xk',
    'YE': 'ye',
    'YT': 'yt',
    'ZA': 'za',
    'ZM': 'zm',
    'ZW': 'zw',
  };

  static const Map<String, String> _flagCodesLanguages = {
    'af': 'af',
    'za': 'za',
    'ar-ae': 'ae',
    'ar-bh': 'bh',
    'ar-dz': 'dz',
    'ar-eg': 'eg',
    'ar-iq': 'iq',
    'ar-jo': 'jo',
    'ar-kw': 'kw',
    'ar-lb': 'lb',
    'ar-ly': 'ly',
    'ar-ma': 'ma',
    'ar-om': 'om',
    'ar-qa': 'qa',
    'ar-sa': 'sa',
    'ar-sy': 'sy',
    'ar-tn': 'tn',
    'ar-ye': 'ye',
    'az': 'az',
    'be': 'be',
    'be-by': 'by',
    'bg': 'bg',
    'ca': 'ca',
    'cs-cz': 'cz',
    'tr': 'tr',
    'sk': 'sk',
    'cy': 'cy',
    'da-dk': 'dk',
    'de': 'de',
    'de-at': 'at',
    'de-ch': 'ch',
    'de-li': 'li',
    'de-lu': 'lu',
    'dv-mv': 'mv',
    'el': 'gr',
    'en-au': 'au',
    'en-bz': 'bz',
    'en': 'gb',
    'en-ie': 'ie',
    'en-jm': 'jm',
    'en-nz': 'nz',
    'en-ph': 'ph',
    'en-tt': 'tt',
    'en-us': 'us',
    'en-zw': 'zw',
    'es': 'es',
    'es-ar': 'ar',
    'es-bo': 'bo',
    'es-cl': 'cl',
    'es-co': 'co',
    'es-cr': 'cr',
    'es-do': 'do',
    'es-ec': 'ec',
    'es-gt': 'gt',
    'es-hn': 'hn',
    'es-mx': 'mx',
    'es-ni': 'ni',
    'es-pa': 'pa',
    'es-pe': 'pe',
    'es-pr': 'pr',
    'es-py': 'py',
    'es-sv': 'sv',
    'es-uy': 'uy',
    'es-ve': 've',
    'et': 'et',
    'et-ee': 'ee',
    'fa': 'ir',
    'fi': 'fi',
    'fo': 'fo',
    'fr': 'fr',
    'fr-mc': 'mc',
    'gl': 'gl',
    'gu': 'gu',
    'he': 'il',
    'hi': 'in',
    'hr': 'hr',
    'ba': 'ba',
    'hu': 'hu',
    'hy': 'am',
    'id': 'id',
    'is': 'is',
    'it': 'it',
    'sv': 'se',
    'pt': 'pt',
    'pt-br': 'br',
    'lt': 'lt',
  };

  /// Get the flag code from a language code.
  ///
  /// Returns `null` if the language code is not found.
  ///
  /// Source of the language codes:
  /// http://www.lingoes.net/en/translator/langcode.htm
  static String? fromLanguageCode(String languageCode) =>
      _flagCodesLanguages.entries
          .singleWhereOrNull((entry) => entry.key == languageCode)
          ?.value;

  /// Get the flag code from a country code.
  ///
  /// Returns `null` if the country code is not found.
  static String? fromCountryCode(String countryCode) =>
      _flagCodesCountries.entries
          .singleWhereOrNull((entry) => entry.key == countryCode)
          ?.value;
}
